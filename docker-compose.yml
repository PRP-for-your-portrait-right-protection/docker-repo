version: "3"


services:
  db:
    image: mongo:latest
    container_name: db
    restart: unless-stopped 
    volumes:
      - mongoVolume:/data/db
    environment:
      MONGO_INITDB_DATABASE: webapp
      MONGODB_DATA_DIR: /data/db
    ports:
      - 27017:27017

  backend:
    restart: unless-stopped
    container_name: backend
    build:
      context: ./backend-repo
    ports:
      - 5001:5001
    volumes:
      - ./backend-repo/:/backend/
    environment:
      FLASK_DEBUG: 1 #리로딩 설정
    command: gunicorn -w 1 -b 0.0.0.0:5001 app:app --reload
    depends_on:
      - db

  # frontend:
  #   container_name: frontend
  #   restart: unless-stopped
  #   build:
  #     context: ./frontend-repo
  #   command: ["yarn", "start"]
  #   ports:
  #     - 3001:3001
  #   volumes:
  #     - ./frontend-repo/:/frontend/
  #     - build_folder:/frontend/build
  #     - ./frontend-repo/node_modules/:/frontend/node_modules
  #   environment:
  #     - CI=true
  #     - CHOKIDAR_USEPOLLING=true
  #     - REACT_APP_BACKEND_URL=http://localhost:5001
  #   tty: true

  nginx:
    build: ./nginx
    ports:
      - 80:8080
    volumes:
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      # - frontend

  # rabbitmq:
  #   hostname: rabbitmq
  #   # 매니지먼트 플러그인이 적용된 이미지
  #   image: "rabbitmq:3-management"
  #   environment:
  #     # 아이디 : admin
  #     # 비밀번호 : mypass
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=mypass
  #   ports:
  #     - "5673:5672"
  #     - "15673:15672"
  #   restart: unless-stopped

  # celery:
  #   restart: unless-stopped
  #   build:
  #     context: ./celery-repo
  #   volumes:
  #     - ./celery-repo/:/celery/
  #   depends_on:
  #     - rabbitmq
  #     - backend
  #     - db

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.2.1
    ports: 
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./prometheus/:/etc/prometheus/
      # - prometheus_data:/prometheus
    # command:
    
    #   - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '--storage.tsdb.path=/prometheus'
    #   - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    #   - '--web.console.templates=/usr/share/prometheus/consoles'
    environment:
      - PROMETHEUS_COMMON_DISABLE_HTTP2 
    depends_on:
      - backend

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    # user: "472"
    # environment:
    #   - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app,grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      # - ./grafana/data:/var/lib/grafana
      # - ./grafana/dashboards:/var/lib/grafana/dashboards
      # - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasources/default.yaml
      # - ./grafana/provisioning/datasources/datasource.yml/:/etc/grafana/datasouce.yml
      - grafana_data:/var/lib/grafana
      # - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./datasource.yml/:/etc/grafana/provisioning/datasource.yml

    ports:
      - 3000:3000
    restart: always
    depends_on:
      - prometheus

  # alertmanager:
  #   image: prom/alertmanager
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./alertmanager/:/etc/alertmanager/
  #   restart: always
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'

volumes: 
  mongoVolume:
  build_folder: null
  # prometheus_data: {}
  grafana_data: {}
