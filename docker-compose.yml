version: "3"

services:
  db:
    image: mongo:latest
    container_name: db

    restart: unless-stopped #컨테이너 스탑하기전까지 항상 재시작
    #no: container를 재시작 시키지 않는다. (default)
    #on-failure[:max-retries]: container가 정상적으로 종료되지 않은 경우(exit code가 0이 아님)에만 재시작 시킨다. max-retries도 함께 주면 재시작 최대 시도횟수를 지정할 수 있고, 테스트 서버 등과 같은 리모트에 설정하면 좋을 것 같다.
    #always: container를 항상 재시작시킨다. exit code 상관 없이 항상 재시작 된다.
    #unless-stopped: container를 stop시키기 전 까지 항상 재시작 시킨다.

    volumes:
      - mongoVolume:/data/db
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: webapp
      MONGODB_DATA_DIR: /data/db
    ports:
      - 27017:27017

  backend:
    restart: unless-stopped
    container_name: backend
    build:
      context: ./backend-repo

    ports:
      - 5001:5001
    volumes:
      - ./backend-repo/:/backend/
        #추가 설정 - 소스코드가 바뀌었다고 기존의 실행파일이 바뀌지 않는다. (재실행필요) 즉 이를 프레임워크에서 지원해야한다.
        # Flask면 추가 설정이 필요

    environment:
      FLASK_DEBUG: 1 #리로딩 설정

    command: gunicorn -w 1 -b 0.0.0.0:5001 app:app --reload
    depends_on:
      - db

  frontend:
    container_name: frontend
    restart: unless-stopped
    build:
      context: ./frontend-repo
    command: ["yarn", "start"]
    ports:
      - 3000:3000
    volumes:
      - ./frontend-repo/:/frontend/
      - build_folder:/frontend/build
      # - ./frontend-repo/build:/frontend/build

      - ./frontend-repo/node_modules/:/frontend/node_modules

    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:5001
    tty: true

  nginx:
    build: ./nginx
    ports:
      - 80:8080
    volumes:
      - build_folder:/var/www/frontend
      # - ./frontend-repo/:/var/www/frontend

    depends_on:
      - backend
      - frontend

  # rabbitmq:
  #   hostname: rabbitmq
  #   # 매니지먼트 플러그인이 적용된 이미지
  #   image: "rabbitmq:3-management"
  #   environment:
  #     # 아이디 : admin
  #     # 비밀번호 : mypass
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=mypass
  #   ports:
  #     - "5673:5672"
  #     - "15673:15672"
  #   restart: unless-stopped

  # celery:
  #   restart: unless-stopped
  #   build:
  #     context: ./celery-repo
  #   volumes:
  #     - ./celery-repo/:/celery/
  #   # user? 자세히 모름
  #   # user: nobody
  #   depends_on:
  #     - rabbitmq
  #     - backend
  #     - db
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.2.1
    ports: 
      - 9090:9090
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    environment:
      - PROMETHEUS_COMMON_DISABLE_HTTP2 
    depends_on:
      - backend

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app,grafana-clock-panel,grafana-simple-json-datasource
    volumes:
       - /etc/localtime:/etc/localtime:ro
       - ./grafana/:/var/lib/grafana
       #- ./grafana/:/etc/grafana/provisioning/

    ports:
      - 3001:3001
    restart: always

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    # networks:
    #   - app-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

volumes: #네임드 볼륨이라고 표현함 , 단 도커에 원래 db를 올리는게 바람직하지 않으며 보통 클라우드 DB에 올리는게 좋다. (도커는 깨질 위험이 있고 날아갈 수 있는 위험이 있다. 이 방식은 가벼운 프로젝트)
  mongoVolume:
  build_folder: null
